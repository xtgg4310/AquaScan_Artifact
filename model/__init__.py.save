from model.classify.resnet_uni import resnet_linear, SupConResNet, DrowningNet
from 
import torch.nn as nn


def select_model(args):
    if args.model_type == 'res18_linear':
        model = resnet_linear(in_channel=args.channel_num, num_classes=args.num_classes, name='resnet18')
    elif args.model_type == 'res34_linear':
        model = resnet_linear(in_channel=args.channel_num, num_classes=args.num_classes, name='resnet34')
    elif args.model_type == 'supCon':
        model = SupConResNet(in_channel=args.channel_num, name='resnet34', head='mlp', feat_dim=128)
    elif args.model_type == 'lstm':
        model = DrowningNet(input_size=args.lstm_input_size, hidden_size=args.lstm_hidden_size, num_layer=args.lstm_num_layer, name='resnet18', num_classes=args.num_classes, in_channel=args.channel_num)
    else:
        raise NotImplementedError
    return model


def equip_multi_gpu(model, args):
    model = nn.DataParallel(model, device_ids=args.gpus)
    return model
